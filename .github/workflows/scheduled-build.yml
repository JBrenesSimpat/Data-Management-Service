# SPDX-License-Identifier: Apache-2.0
# Licensed to the Ed-Fi Alliance under one or more agreements.
# The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
# See the LICENSE and NOTICES files in the project root for more information.

name: Scheduled Build

on:
  workflow_dispatch:
  schedule:
  - cron: '0 8 * * 6' # Scheduled the job to run every Saturday at 8 AM UTC

permissions: read-all

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout the repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup dotnet
        uses: actions/setup-dotnet@87b7050bc53ea08284295505d98d2aa94301e852 # v4.2
        with:
          dotnet-version: '8.0.x'

      - name: Cache Nuget packages
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 #v4.2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/Directory.Packages.props') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: DMS Build
        id: build_step
        run: ./build-dms.ps1 Build -Configuration Release

      - name: Install Coverlet Reference
        if: success()
        run: |
          dotnet tool install --global coverlet.console
          dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Run DMS Unit Test
        id: unit_test_step
        run: ./build-dms.ps1 UnitTest -Configuration Release

      - name: Run ElasticSearch End to End Tests
        if: success()
        run: ./build-dms.ps1 E2ETest -EnableElasticSearch -Configuration Release

      - name: Run OpenSearch End to End Tests and Download OpenAPI specs
        if: success()
        run: |
          # Start E2E tests in background
          $job = Start-Job -ScriptBlock {
            ./build-dms.ps1 E2ETest -EnableOpenSearch -Configuration Release
          }

          # Wait for DMS service to be ready
          Write-Host "Waiting for DMS service to be ready for OpenAPI specs download..."
          $timeout = 300 # 5 minutes
          $elapsed = 0
          $interval = 10
          $serviceReady = $false

          do {
            Start-Sleep -Seconds $interval
            $elapsed += $interval
            try {
              $response = Invoke-WebRequest -Uri "http://localhost:8080/health" -UseBasicParsing -TimeoutSec 10
              if ($response.StatusCode -eq 200) {
                Write-Host "DMS service is ready, downloading OpenAPI specs..."
                $serviceReady = $true

                # Download OpenAPI specs while E2E tests are running
                mkdir specs -ErrorAction SilentlyContinue
                Invoke-WebRequest -Uri "http://localhost:8080/metadata/specifications/resources-spec.json" -OutFile "specs/resources-spec.json"
                Invoke-WebRequest -Uri "http://localhost:8080/metadata/specifications/descriptors-spec.json" -OutFile "specs/descriptors-spec.json"
                Invoke-WebRequest -Uri "http://localhost:8080/metadata/specifications/discovery-spec.json" -OutFile "specs/discovery-spec.json"
                Write-Host "OpenAPI specs downloaded successfully"
                break
              }
            } catch {
              Write-Host "Waiting for DMS service to be ready... ($elapsed/$timeout seconds)"
            }
          } while ($elapsed -lt $timeout)

          if (-not $serviceReady) {
            Write-Error "DMS service did not start within the timeout period"
            Stop-Job $job -ErrorAction SilentlyContinue
            Remove-Job $job -ErrorAction SilentlyContinue
            exit 1
          }

          # Wait for E2E tests to complete
          Write-Host "Waiting for E2E tests to complete..."
          Wait-Job $job
          $jobResult = Receive-Job $job
          $jobState = $job.State
          Remove-Job $job

          Write-Host "E2E Tests output:"
          Write-Host $jobResult

          if ($jobState -ne "Completed") {
            Write-Error "E2E tests failed"
            exit 1
          }

      - name: Validate Resources Spec
        uses: swaggerexpert/swagger-editor-validate@54b85e2f5c1fcdee85308dd57cad8c8ec19d3970
        with:
          definition-file: specs/resources-spec.json
          default-timeout: 30000 # 30 seconds

      - name: Validate Descriptors Spec
        uses: swaggerexpert/swagger-editor-validate@54b85e2f5c1fcdee85308dd57cad8c8ec19d3970
        with:
          definition-file: specs/descriptors-spec.json
          default-timeout: 30000 # 30 seconds

      - name: Validate Discovery Spec
        uses: swaggerexpert/swagger-editor-validate@54b85e2f5c1fcdee85308dd57cad8c8ec19d3970
        with:
          definition-file: specs/discovery-spec.json
          default-timeout: 30000 # 30 seconds

      - name: Notify Slack on success
        if: success()
        uses: slackapi/slack-github-action@485a9d42d3a73031f12ec201c457e2162c45d02d #v2.0.0
        with:
          payload: '{"text":"✅ Build and tests passed for the scheduled run!"}'
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook

      - name: Notify Slack on failure
        if: failure()
        uses: slackapi/slack-github-action@485a9d42d3a73031f12ec201c457e2162c45d02d #v2.0.0
        with:
          payload: |
            {
              "text": "❌ GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "❌ GitHub Action build result: ${{ job.status }}\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref }}\n*Commit Message:* ${{ github.event.head_commit.message || 'No commit message available' }}\n*Log URL:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                }
              ]
            }
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
